data <- data[complete.cases(data), ]
data <- data[order(data[, "outcome"], data[, "hospital"]), ]
data[1, ]
# data <- lapply(data, function(dat) dat[order(dat[, "outcome"], dat[, "hospital"]), ])
}
rankhospital <- function(state, outcome, num = "best") {
if (!is.element(state, state.abb)) {
stop("invalid state")
}
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[, c(2, 7, colnum)]
names(data) <- c("hospital", "state", "outcome")
# sort by states
# note that, below is an inefficient way of sorting
# for efficient sorting based on outcome then on hospital name,
# see the function below
data <-  data[data$state == state, c("hospital", "outcome")]
data[, "outcome"] <- as.numeric(data[, "outcome"])
data <- data[complete.cases(data), ]
data <- data[order(data[, "outcome"]), ]
data <- split(data, data$outcome)
data <- lapply(data, function(arg) arg[order(arg[, "hospital"]), ])
data <- do.call("rbind", data)
data <- data[, c(1, 2)]
rownames(data) <- NULL
switch(num,
"best" = {num = 1},
"worst" = {num = nrow(data)})
if (!is.numeric(num)){
stop("invalid num")
}
data[num, ]
}
rankall <- function(outcome, num = "best") {
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[, c(2, 7, colnum)]
names(data) <- c("hospital", "state", "outcome")
# sort by states
data[, "outcome"] <- as.numeric(data[, "outcome"])
data <- data[complete.cases(data), ]
data <- split(data, data$state)
# efficient ranking using order
data <- lapply(data, function(dat) dat[order(dat[, "outcome"], dat[, "hospital"]), ])
# read num
if (num == "best") {
num = 1
output <- c()
for (i in 1:length(data)){
output <- rbind(output, as.data.frame(data[[i]][1, ]))
}
}
else if (num == "worst") {
num <- sapply(data, function(dat) nrow(dat))
output <- c()
for (i in 1:length(data)){
# print("print below: ")
# print(data[[i]][num[i], ])
output <- rbind(output, as.data.frame(data[[i]][num[i], ]))
}
}
else if (!is.numeric(num)) {
stop("invalid num")
}
else {
output <- c()
for (i in 1:length(data)){
if(is.na(data[[i]][num, 2])){
data[[i]][num, 2] = data[[i]]$state[1]
}
output <- rbind(output, as.data.frame(data[[i]][num, ]))
}
}
output
# data <- sapply(data, function(dat, pos = 20) dat[pos, ])
}
View(data)
rm(list=ls())
library("rmarkdown", lib.loc="~/R/win-library/3.5")
library("tinytex", lib.loc="~/R/win-library/3.5")
commons_archive <- read_csv("../../data/commons_archive.csv", col_types = cols(DateCreated = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
install.packages("githubinstall")
library("githubinstall", lib.loc="~/R/win-library/3.5")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
library("githubinstall", lib.loc="~/R/win-library/3.5")
library("git2r", lib.loc="~/R/win-library/3.5")
file.exists("~/.ssh/id-rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
install.packages("haven")
?subset
?file.path
install.packages("Rserve")
library("blogdown", lib.loc="~/R/win-library/3.5")
library("bookdown", lib.loc="~/R/win-library/3.5")
blogdown::new_site()
library("blogdown", lib.loc="~/R/win-library/3.5")
?brewer.pal
library(ggplot2)
?brewer.pal
??brewer.pal
library(RColorBrewer)
?brewer.pal
library(tidyverse)
library(gganimate)
library(ggthemes)
#Probably try a few times until the raw correlation looks nice and low
df <- data.frame(X = rnorm(200)+1,time="1") %>%
mutate(C = X > 1) %>%
mutate(Y = rnorm(200)+1+2.5*C) %>%
group_by(C) %>%
mutate(mean_X=mean(X),mean_Y=mean(Y)) %>%
ungroup()
cor(df$X,df$Y)
#Calculate correlations
before_cor <- paste("1. Start with raw data, ignoring C. Correlation between X and Y: ",round(cor(df$X,df$Y),3),sep='')
after_cor <- paste("7. Analyze what's left! Correlation between X and Y controlling for C: ",round(cor(df$X-df$mean_X,df$Y-df$mean_Y),3),sep='')
#Add step 2 in which X is demeaned, and 3 in which both X and Y are, and 4 which just changes label
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(mean_X=NA,mean_Y=NA,C=0,time=before_cor),
#Step 2: Raw data only
df %>% mutate(mean_X=NA,mean_Y=NA,time='2. Separate data by the values of C.'),
#Step 3: Add x-lines
df %>% mutate(mean_Y=NA,time='3. Figure out what differences in X are explained by C'),
#Step 4: X de-meaned
df %>% mutate(X = X - mean_X,mean_X=0,mean_Y=NA,time="4. Remove differences in X explained by C"),
#Step 5: Remove X lines, add Y
df %>% mutate(X = X - mean_X,mean_X=NA,time="5. Figure out what differences in Y are explained by C"),
#Step 6: Y de-meaned
df %>% mutate(X = X - mean_X,Y = Y - mean_Y,mean_X=NA,mean_Y=0,time="6. Remove differences in Y explained by C"),
#Step 7: Raw demeaned data only
df %>% mutate(X = X - mean_X,Y = Y - mean_Y,mean_X=NA,mean_Y=NA,time=after_cor))
p <- ggplot(dffull,aes(y=Y,x=X,color=as.factor(C)))+geom_point()+
geom_vline(aes(xintercept=mean_X,color=as.factor(C)))+
geom_hline(aes(yintercept=mean_Y,color=as.factor(C)))+
guides(color=guide_legend(title="C"))+
scale_color_colorblind()+
labs(title = 'Removing the Effect of X on Y by Controlling for Post-Treatment C \n{next_state}')+
transition_states(time,transition_length=c(1,12,32,12,32,12,12),state_length=c(160,125,100,75,100,75,160),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p,nframes=200)
library(ggplot2)
library(gganimate)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
library(ggplot2)
library(gganimate)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
install.packages("gifski")
library(ggplot2)
library(gganimate)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
library(tidyverse)
library(gganimate)
library(ggthemes)
#Probably try a few times until the raw correlation looks nice and low
df <- data.frame(X = rnorm(200)+1,Y=rnorm(200)+1,time="1") %>%
mutate(C = as.integer(X+Y+rnorm(200)/2>2)) %>%
group_by(C) %>%
mutate(mean_X=mean(X),mean_Y=mean(Y)) %>%
ungroup()
cor(df$X,df$Y)
#Calculate correlations
before_cor <- paste("1. Start with raw data, ignoring C. Correlation between X and Y: ",round(cor(df$X,df$Y),3),sep='')
after_cor <- paste("7. Analyze what's left! Correlation between X and Y controlling for C: ",round(cor(df$X-df$mean_X,df$Y-df$mean_Y),3),sep='')
#Add step 2 in which X is demeaned, and 3 in which both X and Y are, and 4 which just changes label
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(mean_X=NA,mean_Y=NA,C=0,time=before_cor),
#Step 2: Raw data only
df %>% mutate(mean_X=NA,mean_Y=NA,time='2. Separate data by the values of C.'),
#Step 3: Add x-lines
df %>% mutate(mean_Y=NA,time='3. Figure out what differences in X are explained by C'),
#Step 4: X de-meaned
df %>% mutate(X = X - mean_X,mean_X=0,mean_Y=NA,time="4. Remove differences in X explained by C"),
#Step 5: Remove X lines, add Y
df %>% mutate(X = X - mean_X,mean_X=NA,time="5. Figure out what differences in Y are explained by C"),
#Step 6: Y de-meaned
df %>% mutate(X = X - mean_X,Y = Y - mean_Y,mean_X=NA,mean_Y=0,time="6. Remove differences in Y explained by C"),
#Step 7: Raw demeaned data only
df %>% mutate(X = X - mean_X,Y = Y - mean_Y,mean_X=NA,mean_Y=NA,time=after_cor))
p <- ggplot(dffull,aes(y=Y,x=X,color=as.factor(C)))+geom_point()+
geom_vline(aes(xintercept=mean_X,color=as.factor(C)))+
geom_hline(aes(yintercept=mean_Y,color=as.factor(C)))+
guides(color=guide_legend(title="C"))+
scale_color_colorblind()+
labs(title = 'Inventing a Correlation Between X and Y by Controlling for Collider C \n{next_state}')+
transition_states(time,transition_length=c(1,12,32,12,32,12,12),state_length=c(160,125,100,75,100,75,160),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p,nframes=200)
library(tidyverse)
library(gganimate)
library(ggthemes)
#Probably try a few times until the raw correlation looks nice and low
df <- data.frame(X = rnorm(200)+1,Y=rnorm(200)+1,time="1") %>%
mutate(C = as.integer(X+Y+rnorm(200)/2>2)) %>%
group_by(C) %>%
mutate(mean_X=mean(X),mean_Y=mean(Y)) %>%
ungroup()
cor(df$X,df$Y)
#Calculate correlations
before_cor <- paste("1. Start with raw data, ignoring C. Correlation between X and Y: ",round(cor(df$X,df$Y),3),sep='')
after_cor <- paste("7. Analyze what's left! Correlation between X and Y controlling for C: ",round(cor(df$X-df$mean_X,df$Y-df$mean_Y),3),sep='')
#Add step 2 in which X is demeaned, and 3 in which both X and Y are, and 4 which just changes label
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(mean_X=NA,mean_Y=NA,C=0,time=before_cor),
#Step 2: Raw data only
df %>% mutate(mean_X=NA,mean_Y=NA,time='2. Separate data by the values of C.'),
#Step 3: Add x-lines
df %>% mutate(mean_Y=NA,time='3. Figure out what differences in X are explained by C'),
#Step 4: X de-meaned
df %>% mutate(X = X - mean_X,mean_X=0,mean_Y=NA,time="4. Remove differences in X explained by C"),
#Step 5: Remove X lines, add Y
df %>% mutate(X = X - mean_X,mean_X=NA,time="5. Figure out what differences in Y are explained by C"),
#Step 6: Y de-meaned
df %>% mutate(X = X - mean_X,Y = Y - mean_Y,mean_X=NA,mean_Y=0,time="6. Remove differences in Y explained by C"),
#Step 7: Raw demeaned data only
df %>% mutate(X = X - mean_X,Y = Y - mean_Y,mean_X=NA,mean_Y=NA,time=after_cor))
p <- ggplot(dffull,aes(y=Y,x=X,color=as.factor(C)))+geom_point()+
geom_vline(aes(xintercept=mean_X,color=as.factor(C)))+
geom_hline(aes(yintercept=mean_Y,color=as.factor(C)))+
guides(color=guide_legend(title="C"))+
scale_color_colorblind()+
labs(title = 'Inventing a Correlation Between X and Y by Controlling for Collider C \n{next_state}')+
transition_states(time,transition_length=c(1,12,32,12,32,12,12),state_length=c(160,125,100,75,100,75,160),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p,nframes=200)
theme_green <- function(){
theme(
plot.background =
element_rect(fill = "green"),
panel.background =
element_rect(fill = "lightgreen")
)
}
library("forcats", lib.loc="~/R/win-library/3.5")
View(df)
View(df)
install.packages("caret")
setwd("C:/stata assignments/almost complete/masters for march/Kenny Msc finance")
rm(list = ls())
setwd("C:/stata assignments/almost complete/masters for march/Kenny Msc finance")
setwd("C:/stata assignments/almost complete/masters for march/Kenny Msc finance")
library(tidyverse)
library(haven)
data <- read_dta("2018 Finaccess Data.dta")
data <- read_sav("2018 Finaccess Data.sav")
View(data)
names(data)
working_data <- data %>% select(a1, a10, a13, a17, b3h1, vul_index)
names(working_data)
?rename
working_data <- working_data %>% rename( "a1" = county, "a10" = Household_size)#      "a13"       "a17"       "b3h1"      "vul_index")
working_data <- working_data %>% rename( "county" =a1 , "Household_siz" = a10)#      "a13"       "a17"       "b3h1"      "vul_index")
names(working_data)
working_data <- working_data %>% rename( "county" =a1 , "Household_size" = a10, "Age of Respondents"= a13)#       "a17"       "b3h1"      "vul_index")
working_data <- working_data %>% rename(  "Age of Respondents"= a13)#       "a17"       "b3h1"      "vul_index")
names(working_data)
working_data <- working_data %>% rename( "county" =a1 , "Household Size" = a10, "Age of Respondents"= a13,"Marital Status" = a17,"Monthly Income" = b3h1,"Vulnerability Index" = vul_index)
r
working_data <- data %>% select(a1, a10, a13, a17, b3h1, vul_index)
working_data <- working_data %>% rename( "county" =a1 , "Household Size" = a10, "Age of Respondents"= a13,"Marital Status" = a17,"Monthly Income" = b3h1,"Vulnerability Index" = vul_index)
table(working_data$county)
rm(list = ls())
setwd("C:/stata assignments/almost complete/masters for march/Kenny Msc finance")
library(tidyverse)
library(haven)
data <- read_sav("2018 Finaccess Data.sav", encoding = T)
working_data <- data %>% select(a1, a10, a13, a17, b3h1, vul_index)
working_data <- working_data %>% rename( "county" =a1 , "Household Size" = a10, "Age of Respondents"= a13,"Marital Status" = a17,"Monthly Income" = b3h1,"Vulnerability Index" = vul_index)
rm(list = ls())
setwd("C:/stata assignments/almost complete/masters for march/Kenny Msc finance")
library(tidyverse)
library(haven)
data <- read_sav("2018 Finaccess Data.sav", encoding = T)
working_data <- data %>% select(a1, a10, a13, a17, b3h1, vul_index)
working_data <- working_data %>% rename( "county" =a1 , "Household Size" = a10, "Age of Respondents"= a13,"Marital Status" = a17,"Monthly Income" = b3h1,"Vulnerability Index" = vul_index)
data <- read_sav("2018 Finaccess Data.sav", encoding = 'utf-8')
data <- read_sav("2018 Finaccess Data.sav", encoding = !NULL)
rm(list = ls())
setwd("C:/stata assignments/almost complete/masters for march/Kenny Msc finance")
library(tidyverse)
library(haven)
data <- read_sav("2018 Finaccess Data.sav")
working_data <- data %>% select(a1, a10, a13, a17, b3h1, vul_index)
working_data <- working_data %>% rename( "county" =a1 , "Household Size" = a10, "Age of Respondents"= a13,"Marital Status" = a17,"Monthly Income" = b3h1,"Vulnerability Index" = vul_index)
class(working_data$county)
attributes(working_data$county)
try <- working_data %>% filter(county == "Turkana")
table(try$county)
head(try,3)
try <- working_data %>% filter(county == 23)
table(try$county)
rm(try)
names(working_data)
class(working_data)
class(working_data$`Monthly Income`)
ttf <- as_factor(working_data$county)
class(ttf)
table(ttf)
ttr <- as.numeric(working_data$`Age of Respondents`)
sum(ttr)
class(ttr)
class(working_data$`Household Size`)
names(working_data)
ttr <- as.numeric(working_data$`Age of Respondents`,working_data$`Household Size`)
working_data$`Monthly Income`
?cor
model <- lm(formula = `Monthly Income` ~ `Household Size` + `Age of Respondents` + `Vulnerability Index`, working_data)
library(psych)
corlation <- corr.test(working_data)
print(corlation) #%>% knitr::kable()
print(corlation, short = F) #%>% knitr::kable()
print(corlation, short = F) %>% augment() #%>% knitr::kable()
library(broom)
print(corlation, short = F) %>% augment() #%>% knitr::kable()
dd <- print(corlation, short = F) #%>% knitr::kable()
ggplot(working_data, aes(y = `Monthly Income`, x = `Age of Respondents`) + geom_point()
)
ggplot(working_data, aes(y = `Monthly Income`, x = `Age of Respondents`)) + geom_point()
ggplot(working_data, aes(y = `Monthly Income`, x = log(`Age of Respondents`))) + geom_point()
ggplot(working_data, aes(log(y = `Monthly Income`), x = `Age of Respondents`)) + geom_point()
ggplot(working_data, aes(log(x = `Monthly Income`), y = `Age of Respondents`)) + geom_point()
ggplot(working_data, aes(y = `Monthly Income`, x = `Age of Respondents`)) + geom_point()
working_data %>% filter(na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(y = `Monthly Income`, x = `Age of Respondents`)) + geom_point()
)
working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(y = `Monthly Income`, x = `Age of Respondents`)) + geom_point()
working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(y = `Monthly Income`, x = log(`Age of Respondents`))) + geom_point(alpha = 0.3)
working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(y = `Monthly Income`, x = log(`Age of Respondents`))) + geom_line()
working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(y = `Monthly Income`, x = `Age of Respondents`)) + geom_line()
working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(x = `Monthly Income`, y = `Age of Respondents`)) + geom_line()
working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`)) %>%
ggplot(aes(x = `Monthly Income`, y =log(`Age of Respondents`))) + geom_line()
summary(working_data$`Age of Respondents`)
summary(working_data$`Monthly Income`)
income_age <- working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`))
income_age <- working_data %>% na_if(" ") %>% filter(!is.na(`Monthly Income`)) %>% filter(!is.na(`Age of Respondents`))
summary(income_age$`Monthly Income`)
?cut
summary(income_age$`Age of Respondents`)
age_groups <-cut(working_data$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), labels = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
age_groups <-cut(working_data$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), levels = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), levels = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
summary(income_age$`Monthly Income`)
monthly_salary <-cut(income_age$`Monthly Income`, breaks=c(0,2000,5000,10000,40000,100000,1000000), levels = c("Below 2,000", "2,000-5,000", "5,001-10,000", "10,001-40,000", "40,001-100,000","Above 100,000"))
ggplot(aes(x = age_groups, y= monthly_salary))+geom_point()
data2 <- as.data.frame(c(age_groups,monthly_salary))
ggplot(data2,aes(x = age_groups, y= monthly_salary))+geom_point()
length(age_groups)
length(monthly_salary)
qplot(data2,aes(x = age_groups, y= monthly_salary))
class(monthly_salary)
class(age_groups)
str(data2)
data2 <- as.data.frame(cbind(age_groups,monthly_salary))
str(data2)
qplot(data2,aes(x = age_groups, y= monthly_salary))
qplot(data2,aes(x = age_groups, y= monthly_salary))
str(data2)
length(data2$age_groups)
ggplot(data2,aes(x = age_groups, y= monthly_salary))+geom_point()
ggplot(data2,aes(y = age_groups, x= monthly_salary))+geom_point()
ggplot(data2,aes(y = age_groups, x= monthly_salary))+geom_bar()
ggplot(data2,aes(y = age_groups, x= monthly_salary))+geom_bar(stat = "identity")
barplot(x=working_data$`Marital Status`)
barplot(x=working_data$`Marital Status`, data = working_data)
barplot(data = working_data, x=working_data$`Marital Status`)
barplot(data = working_data,working_data$`Marital Status`)
?barplot
table(working_data$`Marital Status`)
summary(working_data$`Marital Status`)
new_working_data <- working_data filter(`Marital Status` %in% c(98,98))#%>% mutate(new_status = if_else(`Marital Status`=))
new_working_data <- working_data %>% filter(`Marital Status` %in% c(98,98))#%>% mutate(new_status = if_else(`Marital Status`=))
table(new_working_data$`Marital Status`)
new_working_data <- working_data %>% filter(`Marital Status` %in% -c(98,99))#%>% mutate(new_status = if_else(`Marital Status`=))
table(new_working_data$`Marital Status`)
missing_marital <- c(98,99)
new_working_data <- working_data %>% filter(`Marital Status` != missing_marital#%>% mutate(new_status = if_else(`Marital Status`=))
)
table(new_working_data$`Marital Status`)
new_working_data <- working_data %>% filter(`Marital Status` %in% c(1,2,3,4)#%>% mutate(new_status = if_else(`Marital Status`=))
)
table(new_working_data$`Marital Status`)
new_working_data$`Marital Status` <- as_factor(new_working_data$`Marital Status`)
table(new_working_data$`Marital Status`)
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
table(working_data$`Marital Status`)
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data filter(`Marital Status` %in% c(Single/Never Married,Divorced/separated,Widowed, Married/Living with partner ))#%>% mutate(new_status = if_else(`Marital Status`=))
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data filter(`Marital Status` %in% c(Single/Never Married,Divorced/separated,Widowed, Married/Living with partner ))#%>% mutate(new_status = if_else(`Marital Status`=))
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data filter(`Marital Status` %in% c(Single/Never Married,Divorced/separated,Widowed, Married/Living with partner ))#%>% mutate(new_status = if_else(`Marital Status`=))
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data %>%  filter(`Marital Status` %in% c(Single/Never Married,Divorced/separated,Widowed, Married/Living with partner ))#%>% mutate(new_status = if_else(`Marital Status`=))
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data %>%  filter(`Marital Status` %in% c("Single/Never Married","Divorced/separated,Widowed", "Married/Living with partner" ))#%>% mutate(new_status = if_else(`Marital Status`=))
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data %>%  filter(`Marital Status` %in% c("Single/Never Married","Divorced/separated,Widowed", "Married/Living with partner" ))%>% mutate(new_status = if_else(`Marital Status`= "Married/Living with partner", 1,0))
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data %>%  filter(`Marital Status` %in% c("Single/Never Married","Divorced/separated,Widowed", "Married/Living with partner" ))%>% mutate(new_status = if_else(`Marital Status`== "Married/Living with partner", 1,0))
table(age_groups,monthly_salary)
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), names(age_groups) = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), levels(age_groups) = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), levels = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
names(age_groups) <-  c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years")
table(age_groups,monthly_salary)
names(age_groups) <-  c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years")
age_groups <- as.factor(age_groups)
table(age_groups,monthly_salary)
attributes(age_groups)
table(age_groups,monthly_salary)
monthly_salary <-cut(income_age$`Monthly Income`, breaks=c(0,2000,5000,10000,40000,100000,1000000), labels =  = c("Below 2,000", "2,000-5,000", "5,001-10,000", "10,001-40,000", "40,001-100,000","Above 100,000"))
monthly_salary <-cut(income_age$`Monthly Income`, breaks=c(0,2000,5000,10000,40000,100000,1000000), labels = c("Below 2,000", "2,000-5,000", "5,001-10,000", "10,001-40,000", "40,001-100,000","Above 100,000"))
table(age_groups,monthly_salary)
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), labels = c("Below 20years", "20-25 years", "26-30years", "31-40years", "Above 40years"))
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), labels = c("Below 20", "20-25", "26-30", "31-35","36-40" "Above 40"))
age_groups <-cut(income_age$`Age of Respondents`, breaks=c(0,20,25,30,35,40,100), labels = c("Below 20", "20-25", "26-30", "31-35","36-40", "Above 40"))
table(age_groups,monthly_salary)
working_data$`Marital Status` <- as_factor(working_data$`Marital Status`)
new_working_data <- working_data %>%  filter(`Marital Status` %in% c("Single/Never Married","Divorced/separated,Widowed", "Married/Living with partner" ))%>% mutate(new_status = if_else(`Marital Status`== "Married/Living with partner", 1,0))
names(new_working_data)
model <- lm(`Monthly Income`~new_status, new_working_data)
model <- augment(model)
model
model <- lm(`Monthly Income`~new_status, new_working_data)
model1<- augment(model)
model
summary(model)
anova(model)
model <- lm(`Monthly Income`~factor(new_status), new_working_data)
model
table(new_working_data$new_status)
table(new_working_data$`Monthly Income`)
table(monthly_salary)
table(age_groups)
class(age_groups)
agg <- as.numeric(age_groups)
mss <- as.numeric(monthly_salary)
plot(agg,mss)
ggplot(data2, aes(x = age_groups, y = monthly_salary)) + geom_jitter()
ggplot(data2, aes(x = age_groups, y = monthly_salary)) + geom_jitter(size = 1)
ggplot(data2, aes(x = age_groups, y = monthly_salary)) + geom_jitter(alpha = 0.3)
ggplot(data2, aes(x = age_groups, y = monthly_salary)) + geom_jitter(alpha = 0.1)
ggplot(data2, aes(x = age_groups, y = monthly_salary)) + geom_jitter(alpha = 0.6)
ggplot(working_data, aes(x = `Age of Respondents`, y = `Monthly Income`)) + geom_point()
ggplot(working_data, aes(x = `Age of Respondents`, y = `Monthly Income`)) + geom_point(alpha = 0.3)
ggplot(working_data, aes(x = `Age of Respondents`, y = `Monthly Income`)) + geom_jitter()
ggplot(working_data, aes(x = as.numeric(`Age of Respondents`), y = as.numeric(`Monthly Income`))) + geom_jitter()
table(new_working_data$new_status)
prop.table(table(new_working_data$new_status))/length(new_working_data$new_status)*100
prop.table(table(new_working_data$new_status))
prop.table(table(new_working_data$new_status))*100
model <- lm(`Monthly Income`~factor(new_status), new_working_data)
summary(model)
